===============================================================================
                 Tips about Using Debian's MKL Package / FAQ
===============================================================================

                    -- Mo Zhou <cdluminate@gmail.com>, Last Update: Apr 30 2018

Table of Contents

  (*) How to install these MKL Debian packages?
  (*) How do I link against MKL?
  (*) Environment variables for MKL
  (*) MKL performance tips from maintainer
  (*) Switching BLAS/LAPACK by environment variable and alternatives mechanism
  (*) Where is MKL documentation?
  (*) How do I understand the upstream MKL source directory structure?
  (*) How to get the upstream source tarball?
  (*) What? MKL is redistributable?

-------------------------------------------------------------------------------
How to install these MKL Debian packages?
-------------------------------------------------------------------------------

(1) If you want the basic set (without cluster and multiarch) of MKL, which
    includes shared objects, static libraries and headers:

      $ sudo apt install intel-mkl

    For i386 architecture this is the top level metapackage.

(2) If you want the basic set of MKL together with cluster support, but without
    multiarch libs:

      $ sudo apt install intel-mkl-cluster

    This is only available on amd64.

(3) If you want all the components of MKL, i.e. the basic set, the cluster
    support and the multiarch libraries:

      $ sudo dpkg --add-architecture i386
      $ sudo apt update
      $ sudo apt upgrade
      $ sudo apt install intel-mkl-full

    This is only available on amd64. It's the top level metapackage for amd64.

(4) If you want to simply add a new alternative to libblas.so.3 and
    liblapack.so.3, without any header file:

      $ sudo apt install libmkl-rt

-------------------------------------------------------------------------------
How do I link against MKL?
-------------------------------------------------------------------------------

Just "-lmkl_rt".

For more complicated linking, refer any one of the following:

 * https://software.intel.com/en-us/mkl-linux-developer-guide-using-the-single-dynamic-library

 * intel-mkl-doc /usr/share/doc/intel-mkl/common/mkl_link_line_advisor.htm

 * intel-mkl-linktool:i386 (command line version of the above advisor)

See upstream doc for more detail.

-------------------------------------------------------------------------------
Environment variables for MKL
-------------------------------------------------------------------------------

You may need to manually export the NLSPATH variable, so that the catopen(3)
call is able to find the message catalog:

   $ export NLSPATH=/usr/share/locale/en_US/%N:$NLSPATH

Or $ export NLSPATH=/usr/share/locale/ja_JP/%N:$NLSPATH if your locale is ja_JP.
There is a file debian/tests/catalog.cc for testing catopen.

Apart from NLSPATH, the other environment variables prepared by upstream
scripts such as mklvars.sh are not needed. Here are some of these variables:

   INCLUDE, MKLROOT, LD_LIBRARY_PATH, LIBRARY_PATH, CPATH, NLSPATH,
   MIC_LD_LIBRARY_PATH, MKL_MIC_ENABLE, DYLD_LIBRARY_PATH, F95ROOT
   ...


-------------------------------------------------------------------------------
MKL performance tips from maintainer
-------------------------------------------------------------------------------

Upstream's doc about performance and memory:

https://software.intel.com/en-us/mkl-linux-developer-guide-managing-performance-and-memory

Here are some points from package maintainer:

1. If your program computes weirdly slow with MKL, the following points
   may be helpful for you to find out the root of problem.

   * Set MKL_THREADING_LAYER=sequential environment variable if you
     are calling MKL from a multi-threading application.

   * Tweak environment variable OMP_NUM_THREADS or MKL_NUM_THREADS

   * Disable OpenMP usage from compiler (GCC) flags, e.g. for GOMP by removing

       -fopenmp

     from the compiler argument list. Compile and try the program again.

   * For small size problems:
     https://software.intel.com/en-us/mkl-linux-developer-guide-improving-performance-for-small-size-problems

   * ...

   * Refer to upstream doc if you want more detail.

2. libmkl_rt.so is a magical run-time dispatcher which detects your
   CPU capacity at run time, and automatically selects shared objects
   from which symbols are loaded. By tracing the library calls you
   will figure out which shared objects are actually called.

     e.g. $ ltrace my_program

   See ltrace(1) for detail and advanced tracing.

-------------------------------------------------------------------------------
Switching BLAS/LAPACK by environment variable and alternatives mechanism
-------------------------------------------------------------------------------

Due to possible license violation, the default priority of MKL in the
alternatives mechanism is set to 1. See the following link for discussion:

  https://lists.debian.org/debian-science/2018/04/msg00071.html

However, if the user explicitly agrees to use MKL as the default BLAS/LAPACK,
the priority will be changed to 50, which is even higher than OpenBLAS.

(1) If you want to change the BLAS/LAPACK implementation, and you have root
    permission, the alternative mechanism is at your service.

    First let's check the current alternative status

      $ update-alternatives --get-selections | grep blas
      $ update-alternatives --get-selections | grep lapack

    Then, for example, let's switch the default BLAS implementation

      $ sudo update-alternatives --config libblas.so.3-${DEB_HOST_MULTIARCH}

    In the above command line, the actual value of placeholder
    "${DEB_HOST_MULTIARCH}" can be found by issuing this command

      $ dpkg-architecture -qDEB_HOST_MULTIARCH

    By the way, GUI frontends of update-alternatives such as galternatives
    will also work if you prefer them.

(2) If you have NO root permission, but still want to change the default
    BLAS/LAPACK implementation for yourself, there are still solutions.
    Recall that as elaborated in manual page ls.so(8), both LD_LIBRARY_PATH
    and LD_PRELOAD can be used as solution for this purpose.
    Here is the LD_LIBRARY_PATH example:

      $ export LD_LIBRARY_PATH=usr/lib/${DEB_HOST_MULTIARCH}/mkl/

    The placeholder "${DEB_HOST_MULTIARCH}" is explained above. The above
    solution works because we've put two symbol links in that directory:

      usr/lib/${DEB_HOST_MULTIARCH}/mkl/libblas.so.3
      usr/lib/${DEB_HOST_MULTIARCH}/mkl/liblapack.so.3

    They are both symlinked to libmkl_rt.so . For detail see ld.so(8).

-------------------------------------------------------------------------------
Where is MKL documentation?
-------------------------------------------------------------------------------

Install package 'intel-mkl-doc', and open this URL in your browser:

  file:///usr/share/doc/intel-mkl/ps2018/get_started.htm

This is an MKL documentation overview page. However network access
is required to browse further documents pointed by the page.


-------------------------------------------------------------------------------
How do I understand the upstream MKL source directory structure?
-------------------------------------------------------------------------------

Go to the following page:

  https://software.intel.com/en-us/mkl-linux-developer-guide

I believe that section "Structure of the Intel Math Kernel Library" and
"Appendix C: Directory Structure in Detail" are exactly what you want.
Upstream documentation elaborates not only the directory structure, but
also individual files.

-------------------------------------------------------------------------------
How to get the upstream source tarball?
-------------------------------------------------------------------------------

Go to this page:

  https://software.intel.com/en-us/mkl

Click "Free Download". The tarball will be available after registration.
There are several hashsums in rules.

Note that, Intel provides MKL through other channels to, e.g. Pypi, APT, RPM.

-------------------------------------------------------------------------------
What? MKL is redistributable?
-------------------------------------------------------------------------------

As declared by upstream at this page

  https://software.intel.com/en-us/mkl/license-faq
  "Yes, redistribution is allowed per the terms of the ISSL."

Even if registration is required before downloading the MKL tarball,
the tarball itself is re-distributable and licensed under ISSL.
See communication with upstream for more detail:

  https://github.com/intel/mkl-dnn/issues/206
